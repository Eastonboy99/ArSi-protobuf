syntax="proto2";

enum SRCLabel {
    SRC_NONE = 0;

    // values from input_label_t
    IN_NONE = 1;
    IN_ST = 2;
    IN_TH = 3;
    IN_THR = 4;
    IN_RUD = 5;
    IN_AIL = 6;
    IN_ELE = 7;
    IN_AUX = 8;
    IN_ST_DR = 9;
    IN_RUD_DR = 10;
    IN_AIL_DR = 11;
    IN_ELE_DR = 12;
    IN_TH_DR = 13;
    IN_THR_DR = 14;
    IN_TH_HOLD = 15;
    IN_GEAR = 16;
    IN_FLAPS = 17;
    IN_TRAINER = 18;
    IN_SIDE_L = 19;
    IN_SIDE_R = 20;
    IN_POT1 = 21;
    IN_POT2 = 22;
    IN_POT3 = 23;
    IN_POT4 = 24;
    IN_POT5 = 25;
    IN_POT6 = 26;
    IN_POT7 = 27;
    IN_POT8 = 28;
    IN_POT9 = 29;
    IN_SW1 = 30;
    IN_SW2 = 31;
    IN_SW3 = 32;
    IN_SW4 = 33;
    IN_SW5 = 34;
    IN_SW6 = 35;
    IN_SW7 = 36;
    IN_SW8 = 37;
    IN_SW9 = 38;

    // values from channel_label_t
    CH_CH1 = 39;
    CH_CH2 = 40;
    CH_CH3 = 41;
    CH_CH4 = 42;
    CH_CH5 = 43;
    CH_VIRTUAL1 = 44;
    CH_VIRTUAL2 = 45;
    CH_VIRTUAL3 = 46;
    CH_VIRTUAL4 = 47;
    CH_VIRTUAL5 = 48;
    CH_VIRTUAL6 = 49;
    CH_VIRTUAL7 = 50;
    CH_VIRTUAL8 = 51;
    CH_VIRTUAL9 = 52;
    CH_VIRTUAL10 = 53;
    CH_HIDDEN1 = 54;
    CH_HIDDEN2 = 55;
    CH_HIDDEN3 = 56;
    CH_HIDDEN4 = 57;
    CH_HIDDEN5 = 58;
    CH_HIDDEN6 = 59;
    CH_HIDDEN7 = 60;
    CH_HIDDEN8 = 61;
    CH_HIDDEN9 = 62;
    CH_HIDDEN10 = 63;
    CH_HIDDEN11 = 64;
    CH_HIDDEN12 = 65;
    CH_HIDDEN13 = 66;
    CH_HIDDEN14 = 67;
    CH_HIDDEN15 = 68;
    CH_HIDDEN16 = 69;
    CH_HIDDEN17 = 70;
    CH_HIDDEN18 = 71;
    CH_HIDDEN19 = 72;
    CH_HIDDEN20 = 73;
    CH_HIDDEN21 = 74;
    CH_HIDDEN22 = 75;
    CH_HIDDEN23 = 76;
    CH_HIDDEN24 = 77;
    CH_HIDDEN25 = 78;
    CH_HIDDEN26 = 79;
    CH_HIDDEN27 = 80;
    CH_HIDDEN28 = 81;
    CH_HIDDEN29 = 82;
    CH_HIDDEN30 = 83;
    CH_HIDDEN31 = 84;
    CH_HIDDEN32 = 85;
    CH_HIDDEN33 = 86;
    CH_HIDDEN34 = 87;
    CH_HIDDEN35 = 88;
    CH_HIDDEN36 = 89;
    CH_HIDDEN37 = 90;
    CH_HIDDEN38 = 91;
    CH_HIDDEN39 = 92;
    CH_HIDDEN40 = 93;
    CH_HIDDEN41 = 94;
    CH_HIDDEN42 = 95;
    CH_HIDDEN43 = 96;
    CH_HIDDEN44 = 97;
    CH_HIDDEN45 = 98;
    CH_HIDDEN46 = 99;
    CH_HIDDEN47 = 100;
    CH_HIDDEN48 = 101;
    CH_HIDDEN49 = 102;
    CH_HIDDEN50 = 103;

    // channel_label_t values that correspond to rf_channels
    //   (= channels after applying limts)
    RF_CH1 = 104;
    RF_CH2 = 105;
    RF_CH3 = 106;
    RF_CH4 = 107;
    RF_CH5 = 108;
}

enum ChannelLabel {
     // The following items must be in sequence:

    // NUMBER_OF_RF_CHANNELS channels (CH1..CHxxx)
    CH1 = 0;
    CH2 = 1;
    CH3 = 2;
    CH4 = 3;
    CH5 = 4;

    // NUMBER_OF_VIRTUAL_CHANNELS virtual channels (VIRTUAL1..VIRTUALxxx) = 5;
    VIRTUAL1 = 6;
    VIRTUAL2 = 7;
    VIRTUAL3 = 8;
    VIRTUAL4 = 9;
    VIRTUAL5 = 10;
    VIRTUAL6 = 11;
    VIRTUAL7 = 12;
    VIRTUAL8 = 13;
    VIRTUAL9 = 14;
    VIRTUAL10 = 15;

    // NUMBER_OF_HIDDEN_VIRTUAL_CHANNELS hidden channels to be used by the
    // complex mixer UI (HIDDEN1..HIDDENxxx)
    HIDDEN1 = 16;
    HIDDEN2 = 17;
    HIDDEN3 = 18;
    HIDDEN4 = 19;
    HIDDEN5 = 20;
    HIDDEN6 = 21;
    HIDDEN7 = 22;
    HIDDEN8 = 23;
    HIDDEN9 = 24;
    HIDDEN10 = 25;
    HIDDEN11 = 26;
    HIDDEN12 = 27;
    HIDDEN13 = 28;
    HIDDEN14 = 29;
    HIDDEN15 = 30;
    HIDDEN16 = 31;
    HIDDEN17 = 32;
    HIDDEN18 = 33;
    HIDDEN19 = 34;
    HIDDEN20 = 35;
    HIDDEN21 = 36;
    HIDDEN22 = 37;
    HIDDEN23 = 38;
    HIDDEN24 = 39;
    HIDDEN25 = 40;
    HIDDEN26 = 41;
    HIDDEN27 = 42;
    HIDDEN28 = 43;
    HIDDEN29 = 44;
    HIDDEN30 = 45;
    HIDDEN31 = 46;
    HIDDEN32 = 47;
    HIDDEN33 = 48;
    HIDDEN34 = 49;
    HIDDEN35 = 50;
    HIDDEN36 = 51;
    HIDDEN37 = 52;
    HIDDEN38 = 53;
    HIDDEN39 = 54;
    HIDDEN40 = 55;
    HIDDEN41 = 56;
    HIDDEN42 = 57;
    HIDDEN43 = 58;
    HIDDEN44 = 59;
    HIDDEN45 = 60;
    HIDDEN46 = 61;
    HIDDEN47 = 62;
    HIDDEN48 = 63;
    HIDDEN49 = 64;
    HIDDEN50 = 65;
}

enum OperationType {
    OP_REPLACE = 0;
    OP_ADD = 1;
    OP_MULTIPLY = 2;
    OP_MIN = 3;
    OP_MAX = 4;
}

message MixerUnit {
    required SRCLabel src = 1;
    required ChannelLabel dst = 2;
    required int32 scalar = 3;
    required int32 offset = 4;
    required bool applyTrim = 5;
    optional bool invertSource = 6 [default = false];
    optional OperationType op = 7 [default = OP_REPLACE];
}

message Limits {
    required int32 epL = 1;
    required int32 epH = 2;
    required int32 subtrim = 3;
    required int32 limitL = 4;
    required int32 limitH = 5;
    required int32 failsafe = 6;
    optional uint32 speed = 7 [default = 0];
    optional bool invert = 8 [default = false];
}

enum RFProtocolType
{
    RF_PROTOCOL_HK310 = 0;
    RF_PROTOCOL_ARSI = 1;
}

message Model {
    repeated uint32 uuid = 1;
    required string name = 2;
    repeated MixerUnit mixerUnits = 3;
    repeated Limits limits = 4;
    required RFProtocolType rfProtocolType = 5;
}